<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Generador: Pr√°ctica de las conjugaciones</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .checkmark { margin-left: 6px; font-weight: bold; }
    .correct { color: #16a34a; }
    .incorrect { color: #dc2626; }
  </style>
</head>
<body class="font-sans bg-gray-100 min-h-screen p-6">
  <div class="max-w-5xl mx-auto space-y-8">

    <!-- Input -->
    <section class="bg-white rounded-xl shadow p-5 space-y-4">
      <h1 class="text-2xl font-bold text-gray-800">Generador: Pr√°ctica de las conjugaciones</h1>

      <!-- New: Tense field -->
      <div class="flex flex-col gap-2 sm:flex-row sm:items-center">
        <label for="tenseField" class="text-sm font-medium text-gray-700">Tiempo / Tense (opcional):</label>
        <input id="tenseField" list="tensesList" class="w-full sm:w-80 p-2 border rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-400"
               placeholder="Pret√©rito" />
        <datalist id="tensesList">
          <option value="Presente"></option>
          <option value="Pret√©rito"></option>
          <option value="Imperfecto"></option>
          <option value="Futuro"></option>
          <option value="Condicional"></option>
          <option value="Presente del subjuntivo"></option>
          <option value="Imperfecto del subjuntivo"></option>
          <option value="Presente perfecto"></option>
          <option value="Pluscuamperfecto"></option>
        </datalist>
      </div>

      <textarea id="inputArea" class="w-full h-64 p-4 border rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-400 font-mono text-sm"
        placeholder="ser
yo fui
t√∫ fuiste
√©l/ella/usted fue
nosotros/nosotras fuimos
vosotros/vosotras fuisteis
ellos/ellas/ustedes fueron"></textarea>

      <button id="genBtn" class="mt-2 bg-pink-600 hover:bg-pink-700 text-white font-semibold py-2 px-6 rounded-xl shadow-md">Generar secci√≥n</button>
      <span id="parseMsg" class="text-sm text-gray-600 ml-2"></span>
    </section>

    <!-- Preview -->
    <section>
      <h2 class="text-xl font-semibold mb-2">Vista previa</h2>
      <div id="previewArea"></div>
    </section>

    <!-- Code Output -->
    <section id="codeBox" class="hidden space-y-3">
      <h2 class="text-xl font-semibold">C√≥digo HTML para copiar</h2>
      <textarea id="htmlCode" class="w-full h-96 p-4 border rounded-xl font-mono text-xs bg-gray-50"></textarea>
    </section>

  </div>

  <script>
    // --- Helper for preview ---
    function instantiateWidget(container, rawText, tenseLabel = "") {
      const normalize = (s) => s.normalize("NFC").toLowerCase().trim();

      function parseInput(text) {
        const lines = text.split("\n").map(l => l.trim()).filter(Boolean);
        let currentVerb = null, temp = [], data = {}, personStart = /^(yo|t√∫|√©l|nosotros|vosotros|ellos)/i;
        for (const line of lines) {
          if (personStart.test(line)) {
            const form = line.split(/\s+/).slice(1).join(" ");
            temp.push(form);
            if (temp.length === 6 && currentVerb) { data[currentVerb] = temp; temp = []; }
          } else {
            currentVerb = line.replace(/[:‚Üí].*$/, "").trim();
          }
        }
        return data;
      }

      const answers = parseInput(rawText);
      let totalCells = 0;

      const tenseBadge = tenseLabel
        ? `<span class="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-semibold bg-pink-100 text-pink-700 align-middle">${tenseLabel}</span>`
        : "";

      container.innerHTML = `
<section class="bg-white shadow rounded-xl border-l-4 border-pink-500 overflow-hidden">
  <div class="px-4 pt-4 flex items-center gap-2">
    <h2 class="text-pink-600 font-semibold text-lg">Pr√°ctica de las conjugaciones</h2>
    ${tenseBadge}
  </div>
  <div class="p-4 text-gray-800 space-y-4">
    <div class="overflow-x-auto">
      <table class="min-w-full text-sm border border-gray-200 rounded-lg">
        <thead>
          <tr class="bg-pink-50 text-gray-800">
            <th class="px-3 py-2 text-left">Verbo</th>
            <th class="px-3 py-2 text-left">yo</th>
            <th class="px-3 py-2 text-left">t√∫</th>
            <th class="px-3 py-2 text-left">√©l/ella/ud.</th>
            <th class="px-3 py-2 text-left">nosotros</th>
            <th class="px-3 py-2 text-left">vosotros</th>
            <th class="px-3 py-2 text-left">ellos/uds.</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
    <div class="mt-4 flex gap-3">
      <button class="checkBtn bg-pink-600 hover:bg-pink-700 text-white px-4 py-2 rounded-lg">Comprobar</button>
      <button class="revealBtn bg-slate-800 hover:bg-slate-900 text-white px-4 py-2 rounded-lg">Revelar</button>
      <button class="resetBtn bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg">Reiniciar</button>
    </div>
    <p class="progress font-semibold text-pink-600"></p>
  </div>
</section>`;

      const tbody = container.querySelector("tbody");
      Object.keys(answers).forEach(verb => {
        const tr = document.createElement("tr");
        tr.innerHTML = `<td class="px-3 py-2 font-semibold">${verb}</td>`;
        answers[verb].forEach((ans, i) => {
          const td = document.createElement("td");
          td.className = "px-3 py-2";
          td.innerHTML = `
            <div class="flex items-center">
              <input type="text" data-verb="${verb}" data-index="${i}" class="border rounded px-2 py-1 w-28 focus:ring-2 focus:ring-pink-400">
              <span class="checkmark"></span>
            </div>`;
          tr.appendChild(td); totalCells++;
        });
        tbody.appendChild(tr);
      });

      const progress = container.querySelector(".progress");
      function updateProgress(){
        const c = container.querySelectorAll(".checkmark.correct").length;
        progress.textContent = (c === totalCells && totalCells > 0)
          ? `üéâ ¬°Completado! (${c} / ${totalCells} correct)`
          : `‚úÖ ${c} / ${totalCells} correct`;
      }
      function checkInput(inp){
        const v = inp.dataset.verb, i = +inp.dataset.index, val = normalize(inp.value), correct = normalize(answers[v][i]);
        const mark = inp.nextElementSibling;
        if (val === correct) { mark.textContent = "‚úì"; mark.className = "checkmark correct"; }
        else { mark.textContent = "‚úó"; mark.className = "checkmark incorrect"; }
        updateProgress();
      }
      function checkAll(){ container.querySelectorAll("input").forEach(checkInput); }
      function revealAll(){
        container.querySelectorAll("input").forEach(inp=>{
          const v = inp.dataset.verb, i = +inp.dataset.index;
          inp.value = answers[v][i];
          const m = inp.nextElementSibling; m.textContent = "‚úì"; m.className = "checkmark correct";
        });
        updateProgress();
      }
      function resetAll(){
        container.querySelectorAll("input").forEach(inp=>{
          inp.value = "";
          const m = inp.nextElementSibling; m.textContent = ""; m.className = "checkmark";
        });
        updateProgress();
      }

      container.querySelectorAll("input").forEach(inp=>{
        inp.addEventListener("keydown", e=>{ if (e.key === "Enter") { e.preventDefault(); checkInput(inp); }});
      });
      container.querySelector(".checkBtn").addEventListener("click", checkAll);
      container.querySelector(".revealBtn").addEventListener("click", revealAll);
      container.querySelector(".resetBtn").addEventListener("click", resetAll);
      updateProgress();
    }

    // --- Generate Button ---
    document.getElementById("genBtn").addEventListener("click", ()=>{
      const raw = document.getElementById("inputArea").value.trim();
      const tenseRaw = document.getElementById("tenseField").value.trim();
      if (!raw) return;

      // PREVIEW
      const prevId = "prev-" + Math.random().toString(36).slice(2,9);
      document.getElementById("previewArea").innerHTML = `<div id="${prevId}"></div>`;
      instantiateWidget(document.getElementById(prevId), raw, tenseRaw);

      // EXPORT ‚Äî full standalone snippet
      const safeRaw = raw.replace(/`/g,"\\`").replace(/<\/script>/gi,"<\\/script>");
      const safeTense = tenseRaw.replace(/`/g,"\\`").replace(/<\/script>/gi,"<\\/script>");
      const snippet = `
<div id="${prevId}"></div>
<script>
(function(){
  const TENSETEXT = \`${safeTense}\`;

  const normalize=(s)=>s.normalize("NFC").toLowerCase().trim();
  function parseInput(text){
    const lines=text.split("\\n").map(l=>l.trim()).filter(Boolean);
    let currentVerb=null,temp=[],data={},personStart=/^(yo|t√∫|√©l|nosotros|vosotros|ellos)/i;
    for(const line of lines){
      if(personStart.test(line)){
        const form=line.split(/\\s+/).slice(1).join(" ");
        temp.push(form);
        if(temp.length===6 && currentVerb){data[currentVerb]=temp;temp=[];}
      } else { currentVerb=line.replace(/[:‚Üí].*$/,"").trim(); }
    }
    return data;
  }
  const answers=parseInput(\`${safeRaw}\`);
  let totalCells=0;
  const container=document.getElementById("${prevId}");
  const tenseBadge = TENSETEXT
    ? '<span class="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-semibold bg-pink-100 text-pink-700 align-middle">'+TENSETEXT+'</span>'
    : '';

  container.innerHTML=\`
<section class="bg-white shadow rounded-xl border-l-4 border-pink-500 overflow-hidden">
  <div class="px-4 pt-4 flex items-center gap-2">
    <h2 class="text-pink-600 font-semibold text-lg">Pr√°ctica de las conjugaciones</h2>\${tenseBadge}
  </div>
  <div class="p-4 text-gray-800 space-y-4">
    <div class="overflow-x-auto">
      <table class="min-w-full text-sm border border-gray-200 rounded-lg">
        <thead>
          <tr class="bg-pink-50 text-gray-800">
            <th class="px-3 py-2 text-left">Verbo</th>
            <th class="px-3 py-2 text-left">yo</th>
            <th class="px-3 py-2 text-left">t√∫</th>
            <th class="px-3 py-2 text-left">√©l/ella/ud.</th>
            <th class="px-3 py-2 text-left">nosotros</th>
            <th class="px-3 py-2 text-left">vosotros</th>
            <th class="px-3 py-2 text-left">ellos/uds.</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
    <div class="mt-4 flex gap-3">
      <button class="checkBtn bg-pink-600 hover:bg-pink-700 text-white px-4 py-2 rounded-lg">Comprobar</button>
      <button class="revealBtn bg-slate-800 hover:bg-slate-900 text-white px-4 py-2 rounded-lg">Revelar</button>
      <button class="resetBtn bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg">Reiniciar</button>
    </div>
    <p class="progress font-semibold text-pink-600"></p>
  </div>
</section>\`;

  const tbody=container.querySelector("tbody");
  Object.keys(answers).forEach(verb=>{
    const tr=document.createElement("tr");
    tr.innerHTML=\`<td class="px-3 py-2 font-semibold">\${verb}</td>\`;
    answers[verb].forEach((ans,i)=>{
      const td=document.createElement("td");
      td.className="px-3 py-2";
      td.innerHTML=\`<div class="flex items-center">
        <input type="text" data-verb="\${verb}" data-index="\${i}" class="border rounded px-2 py-1 w-28 focus:ring-2 focus:ring-pink-400">
        <span class="checkmark"></span>
      </div>\`;
      tr.appendChild(td); totalCells++;
    });
    tbody.appendChild(tr);
  });

  const progress=container.querySelector(".progress");
  function updateProgress(){
    const c=container.querySelectorAll(".checkmark.correct").length;
    progress.textContent=(c===totalCells && totalCells>0)?\`üéâ ¬°Completado! (\${c} / \${totalCells} correct)\`:\`‚úÖ \${c} / \${totalCells} correct\`;
  }
  function checkInput(inp){
    const v=inp.dataset.verb,i=+inp.dataset.index,val=normalize(inp.value),correct=normalize(answers[v][i]);
    const mark=inp.nextElementSibling;
    if(val===correct){mark.textContent="‚úì";mark.className="checkmark correct";}
    else{mark.textContent="‚úó";mark.className="checkmark incorrect";}
    updateProgress();
  }
  function checkAll(){container.querySelectorAll("input").forEach(checkInput);}
  function revealAll(){container.querySelectorAll("input").forEach(inp=>{const v=inp.dataset.verb,i=+inp.dataset.index;inp.value=answers[v][i];const m=inp.nextElementSibling;m.textContent="‚úì";m.className="checkmark correct";});updateProgress();}
  function resetAll(){container.querySelectorAll("input").forEach(inp=>{inp.value="";const m=inp.nextElementSibling;m.textContent="";m.className="checkmark";});updateProgress();}
  container.querySelectorAll("input").forEach(inp=>{inp.addEventListener("keydown",e=>{if(e.key==="Enter"){e.preventDefault();checkInput(inp);}});});
  container.querySelector(".checkBtn").addEventListener("click",checkAll);
  container.querySelector(".revealBtn").addEventListener("click",revealAll);
  container.querySelector(".resetBtn").addEventListener("click",resetAll);
  updateProgress();
})();
<\/script>`;

      document.getElementById("htmlCode").value = snippet;
      document.getElementById("codeBox").classList.remove("hidden");

      const verbCount = (raw.match(/\n\s*(yo|t√∫|√©l|nosotros|vosotros|ellos)/gi)||[]).length/6;
      document.getElementById("parseMsg").textContent = `Detectados ~${Math.max(1, Math.floor(verbCount))} verbo(s).`;
    });
  </script>
</body>
</html>
