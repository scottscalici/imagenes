<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Generador: Práctica</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 p-6">
  <div class="max-w-3xl mx-auto bg-white rounded-xl shadow p-6 border border-gray-100">
    <h1 class="text-2xl font-bold text-amber-600 mb-4">Generador de Sección: Práctica</h1>

    <!-- Tipo de práctica -->
    <label class="block font-semibold mb-1">Tipo de práctica:</label>
    <select id="practiceType" class="w-full border rounded p-2 mb-4">
      <option value="">Selecciona un tipo</option>
      <option>Trabajo individual</option>
      <option>Trabajo en grupo</option>
      <option>Actividad VHL</option>
      <option>Discusión en clase</option>
      <option>Discusión en grupos pequeños</option>
      <option>Enseñanza entre compañeros</option>
      <option>Reflexión / Diario</option>
      <option>Rotación por estaciones</option>
      <option>Práctica tecnológica / Cuestionario</option>
    </select>

    <!-- Descripción -->
    <label class="block font-semibold mb-1">Descripción de la actividad:</label>
    <textarea id="description" class="w-full border rounded p-2 mb-4" rows="3" placeholder="Describe la práctica..."></textarea>

    <!-- Objetivo -->
    <label class="block font-semibold mb-1">Objetivo / Propósito:</label>
    <textarea id="objective" class="w-full border rounded p-2 mb-4" rows="2" placeholder="¿Cuál es el propósito de la práctica?"></textarea>

    <!-- Imagen -->
    <label class="block font-semibold mb-1">Imagen (URL desde GitHub o similar):</label>
    <input id="imageUrl" type="text" class="w-full border rounded p-2 mb-4" placeholder="https://raw.githubusercontent.com/..." />

    <!-- Enlace -->
    <div class="grid grid-cols-2 gap-4 mb-4">
      <div>
        <label class="block font-semibold mb-1">Enlace (URL):</label>
        <input id="url" type="text" class="w-full border rounded p-2" placeholder="https://..." />
      </div>
      <div>
        <label class="block font-semibold mb-1">Texto visible del enlace:</label>
        <input id="linkText" type="text" class="w-full border rounded p-2" placeholder="Ej. Haz clic aquí para la actividad" />
      </div>
    </div>

    <!-- Colores -->
    <label class="block font-semibold mb-1">Color de la sección:</label>
    <select id="color" class="w-full border rounded p-2 mb-4">
      <option value="amber">Ámbar (por defecto)</option>
      <option value="azul">Azul</option>
      <option value="verde">Verde</option>
      <option value="rojo">Rojo</option>
      <option value="gris">Gris</option>
      <option value="rosa">Rosa</option>
      <option value="morado">Morado</option>
      <option value="teal">Verde azulado (Teal)</option>
      <option value="cyan">Cian</option>
      <option value="lime">Lima</option>
      <option value="naranja">Naranja</option>
      <option value="pizarra">Pizarra (Slate)</option>
    </select>

    <label class="block font-semibold mb-1">Color personalizado (Tailwind o HEX opcional):</label>
    <input id="customColor" type="text" class="w-full border rounded p-2 mb-6" placeholder="Ej. #ff6600 o text-teal-600" />

    <!-- Código adicional -->
    <label class="block font-semibold mb-1">Código adicional (HTML/JS opcional):</label>
    <textarea id="customCode" class="w-full border rounded p-2 mb-6" rows="3" placeholder="&lt;script&gt;...&lt;/script&gt;"></textarea>

    <!-- Botones -->
    <div class="flex gap-4 mb-6">
      <button id="generateBtn" class="bg-amber-600 hover:bg-amber-700 text-white px-4 py-2 rounded">Generar HTML</button>
      <button id="copyBtn" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded">Copiar HTML</button>
    </div>

    <!-- Resultado -->
    <h2 class="text-xl font-semibold mt-4 mb-2">Código generado:</h2>
    <textarea id="output" class="w-full border rounded p-2 h-48 font-mono mb-6" readonly></textarea>

    <!-- Vista previa -->
    <h2 class="text-xl font-semibold mb-2">Vista previa:</h2>
    <div id="preview" class="border rounded p-4 bg-gray-50"></div>
  </div>

  <script>
    const colorMap = {
      amber: ['amber-500', 'amber-600'],
      azul: ['blue-500', 'blue-600'],
      verde: ['green-500', 'green-600'],
      rojo: ['red-500', 'red-600'],
      gris: ['gray-500', 'gray-600'],
      rosa: ['pink-500', 'pink-600'],
      morado: ['purple-500', 'purple-600'],
      teal: ['teal-500', 'teal-600'],
      cyan: ['cyan-500', 'cyan-600'],
      lime: ['lime-500', 'lime-600'],
      naranja: ['orange-500', 'orange-600'],
      pizarra: ['slate-500', 'slate-600']
    };

    function generateHTML() {
      const type = document.getElementById('practiceType').value;
      const description = document.getElementById('description').value.trim();
      const objective = document.getElementById('objective').value.trim();
      const url = document.getElementById('url').value.trim();
      const linkText = document.getElementById('linkText').value.trim();
      const imageUrl = document.getElementById('imageUrl').value.trim();
      const color = document.getElementById('color').value || 'amber';
      const customColor = document.getElementById('customColor').value.trim();
      const customCode = document.getElementById('customCode').value.trim();

      const [borderColor, textColor] = colorMap[color] || colorMap['amber'];

      let appliedTextColor = `text-${textColor}`;
      let appliedBorderColor = `border-${borderColor}`;
      let inlineBorderStyle = '';

      // Detect HEX color input
      if (customColor.startsWith('#')) {
        inlineBorderStyle = ` style=\"border-color: ${customColor};\"`;
        appliedTextColor = '';
        appliedBorderColor = 'border-l-4';
      } else if (customColor) {
        appliedTextColor = customColor;
        appliedBorderColor = customColor.replace('text-', 'border-');
      }

      let html = `<section class=\"bg-white rounded-xl shadow p-6 border border-gray-100 border-l-4 ${appliedBorderColor}\"${inlineBorderStyle}>\n`;
      if (type) html += `  <h2 class=\"${appliedTextColor} font-semibold text-lg px-4 pt-4\">${type}</h2>\n`;
      html += `  <div class=\"p-4 text-gray-800 space-y-4\">\n`;
      if (imageUrl) html += `    <img src=\"${imageUrl}\" alt=\"imagen práctica\" class=\"rounded-lg shadow mb-4\">\n`;
      if (description) html += `    <p>${description}</p>\n`;
      if (objective) html += `    <p><strong>Objetivo:</strong> ${objective}</p>\n`;
      if (url) {
        const link = linkText || url;
        html += `    <p><a href=\"${url}\" target=\"_blank\" class=\"${appliedTextColor} hover:underline\">${link}</a></p>\n`;
      }
      if (customCode) html += `    ${customCode}\n`;
      html += `  </div>\n</section>`;

      document.getElementById('output').value = html;
      document.getElementById('preview').innerHTML = html;
    }

    document.getElementById('generateBtn').addEventListener('click', generateHTML);
    document.getElementById('copyBtn').addEventListener('click', () => {
      const output = document.getElementById('output');
      output.select();
      document.execCommand('copy');
    });

    document.querySelectorAll('input, textarea, select').forEach(el => {
      el.addEventListener('input', generateHTML);
    });
  </script>
</body>
</html>
